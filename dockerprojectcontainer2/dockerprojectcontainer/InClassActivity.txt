Introduction: 
Java's massive popularity in software development has been championed by it cross platform capabilities. Unlike C or C++ which are compiled down to OS specific machine code, Java takes a bit of a different approach.
Java's Architecture:
Java's cross platform abilities come from the JVM or Java Virtual Machine. As long as the system you are working with can run the JVM you can run any java application. With this architecture, Java is special as unlike most languages is a complied and interpreted language, not one or the other
Bytecode:
When Java code is compiled, its compiled into a classfile with bytecode. This bytecode is unique to the JIT compiler which stands for Just In Time compiler. The JIT compiler interacts with the JVM to execute the compiled code line by line.
tandard Library: 
The JVM on its own is not able to actually run the java code, It mostly just provided an environment for the Java code to be interpreted. The Java Standard library does most of the heavy lifting here, the JVM and JIT work together to understand the compiled code and uses the Standard Library to actually execute the code. The Standard library are the functions that Java is able to run on the OS, this is how Java code can actually run on different operating systems. The java code is ran using that OS's java standard library 
WORA:
WORA stands for Write Once, Run Anywhere. WORA was championed by Java in 1995 to push the idea that due to Java unique architecture, code would be written once and ran on all systems with a JVM. Due to this mantra the installation of the JVM on chips, devices, or software became an industry standard
https://en.wikipedia.org/wiki/Write_once,_run_anywhere
https://www.geeksforgeeks.org/just-in-time-compiler/
https://hasithas.medium.com/understanding-how-java-virtual-machine-jvm-works-a1b07c0c399a
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/
